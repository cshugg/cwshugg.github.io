(function() {var implementors = {};
implementors["aead"] = [{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl&lt;'msg, 'aad&gt; Unpin for Payload&lt;'msg, 'aad&gt;","synthetic":true,"types":[]}];
implementors["aes_gcm"] = [{"text":"impl&lt;B, N&gt; Unpin for AesGcm&lt;B, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["aes_soft"] = [{"text":"impl Unpin for Aes128","synthetic":true,"types":[]},{"text":"impl Unpin for Aes192","synthetic":true,"types":[]},{"text":"impl Unpin for Aes256","synthetic":true,"types":[]}];
implementors["argon2"] = [{"text":"impl&lt;'a&gt; Unpin for Config&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for ThreadMode","synthetic":true,"types":[]},{"text":"impl Unpin for Variant","synthetic":true,"types":[]},{"text":"impl Unpin for Version","synthetic":true,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; Unpin for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for CapacityError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Unpin for Drain&lt;'a, A&gt;","synthetic":true,"types":[]}];
implementors["atty"] = [{"text":"impl Unpin for Stream","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl Unpin for Config","synthetic":true,"types":[]},{"text":"impl Unpin for DecodeError","synthetic":true,"types":[]},{"text":"impl Unpin for CharacterSet","synthetic":true,"types":[]},{"text":"impl Unpin for LineEnding","synthetic":true,"types":[]},{"text":"impl Unpin for LineWrap","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for DisplayError","synthetic":true,"types":[]}];
implementors["blake2b_simd"] = [{"text":"impl Unpin for Params","synthetic":true,"types":[]},{"text":"impl Unpin for State","synthetic":true,"types":[]},{"text":"impl Unpin for Hash","synthetic":true,"types":[]},{"text":"impl Unpin for Params","synthetic":true,"types":[]},{"text":"impl Unpin for State","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for HashManyJob&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["block_buffer"] = [{"text":"impl&lt;BlockSize&gt; Unpin for BlockBuffer&lt;BlockSize&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["block_cipher_trait"] = [{"text":"impl Unpin for InvalidKeyLength","synthetic":true,"types":[]}];
implementors["block_padding"] = [{"text":"impl Unpin for PadError","synthetic":true,"types":[]},{"text":"impl Unpin for UnpadError","synthetic":true,"types":[]},{"text":"impl Unpin for ZeroPadding","synthetic":true,"types":[]},{"text":"impl Unpin for Pkcs7","synthetic":true,"types":[]},{"text":"impl Unpin for AnsiX923","synthetic":true,"types":[]},{"text":"impl Unpin for Iso7816","synthetic":true,"types":[]},{"text":"impl Unpin for NoPadding","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl Unpin for BigEndian","synthetic":true,"types":[]},{"text":"impl Unpin for LittleEndian","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl&lt;Tz&gt; Unpin for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; Unpin for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl Unpin for ParseMonthError","synthetic":true,"types":[]},{"text":"impl Unpin for SecondsFormat","synthetic":true,"types":[]},{"text":"impl Unpin for RoundingError","synthetic":true,"types":[]},{"text":"impl Unpin for Weekday","synthetic":true,"types":[]},{"text":"impl Unpin for Month","synthetic":true,"types":[]},{"text":"impl Unpin for FixedOffset","synthetic":true,"types":[]},{"text":"impl Unpin for Local","synthetic":true,"types":[]},{"text":"impl Unpin for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for NaiveDate","synthetic":true,"types":[]},{"text":"impl Unpin for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl Unpin for IsoWeek","synthetic":true,"types":[]},{"text":"impl Unpin for NaiveTime","synthetic":true,"types":[]},{"text":"impl Unpin for Parsed","synthetic":true,"types":[]},{"text":"impl Unpin for InternalNumeric","synthetic":true,"types":[]},{"text":"impl Unpin for InternalFixed","synthetic":true,"types":[]},{"text":"impl Unpin for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Pad","synthetic":true,"types":[]},{"text":"impl Unpin for Numeric","synthetic":true,"types":[]},{"text":"impl Unpin for Fixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["cookie"] = [{"text":"impl Unpin for Key","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for PrivateJar&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for SignedJar&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for CookieBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for CookieJar","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Delta&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c&gt; Unpin for Cookie&lt;'c&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'c&gt; Unpin for EncodedCookie&lt;'a, 'c&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'c: 'a,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ParseError","synthetic":true,"types":[]},{"text":"impl Unpin for SameSite","synthetic":true,"types":[]}];
implementors["cpuid_bool"] = [{"text":"impl Unpin for LazyBool","synthetic":true,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T&gt; Unpin for CachePadded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Backoff","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Unpin for AtomicCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Parker","synthetic":true,"types":[]},{"text":"impl Unpin for Unparker","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Unpin for ShardedLock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Unpin for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Unpin for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; Unpin for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; Unpin for ScopedThreadBuilder&lt;'scope, 'env&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'env: 'scope,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'scope, T&gt; Unpin for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":true,"types":[]}];
implementors["crypto_mac"] = [{"text":"impl Unpin for InvalidKeyLength","synthetic":true,"types":[]},{"text":"impl Unpin for MacError","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Unpin for Output&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;M as Mac&gt;::OutputSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["devise_core"] = [{"text":"impl&lt;'p&gt; Unpin for Fields&lt;'p&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Unpin for Field&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for GenericSupport","synthetic":true,"types":[]},{"text":"impl Unpin for DataSupport","synthetic":true,"types":[]},{"text":"impl Unpin for DeriveGenerator","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for MetaItemList&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for SpanWrapped&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, T&gt; Unpin for Derived&lt;'p, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'p&gt; Unpin for FieldParent&lt;'p&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for MetaItem&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for GenericKind","synthetic":true,"types":[]}];
implementors["digest"] = [{"text":"impl Unpin for InvalidOutputSize","synthetic":true,"types":[]}];
implementors["fake_simd"] = [{"text":"impl Unpin for u32x4","synthetic":true,"types":[]},{"text":"impl Unpin for u64x2","synthetic":true,"types":[]}];
implementors["filetime"] = [{"text":"impl Unpin for FileTime","synthetic":true,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T, U&gt; Unpin for GenericArray&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as ArrayLength&lt;T&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, N&gt; Unpin for GenericArrayIter&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;T&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl Unpin for Error","synthetic":true,"types":[]}];
implementors["ghash"] = [{"text":"impl Unpin for GHash","synthetic":true,"types":[]}];
implementors["glob"] = [{"text":"impl Unpin for Paths","synthetic":true,"types":[]},{"text":"impl Unpin for GlobError","synthetic":true,"types":[]},{"text":"impl Unpin for PatternError","synthetic":true,"types":[]},{"text":"impl Unpin for Pattern","synthetic":true,"types":[]},{"text":"impl Unpin for MatchOptions","synthetic":true,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;K, V, S&gt; Unpin for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Unpin for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for TryReserveError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Bucket&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for RawTable&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for RawIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for RawIntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for RawDrain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for RawIterHash&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Unpin for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for Keys&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for Values&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, F&gt; Unpin for DrainFilter&lt;'a, K, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for ValuesMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Unpin for RawEntryBuilderMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Unpin for RawOccupiedEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Unpin for RawVacantEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Unpin for RawEntryBuilder&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Unpin for OccupiedEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Unpin for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for DefaultHashBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Unpin for RawEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Unpin for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Unpin for Iter&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Unpin for IntoIter&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Unpin for Drain&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, F&gt; Unpin for DrainFilter&lt;'a, K, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Unpin for Intersection&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Unpin for Difference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Unpin for SymmetricDifference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Unpin for Union&lt;'a, T, S&gt;","synthetic":true,"types":[]}];
implementors["hkdf"] = [{"text":"impl Unpin for InvalidPrkLength","synthetic":true,"types":[]},{"text":"impl Unpin for InvalidLength","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Unpin for Hkdf&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as BlockInput&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hmac"] = [{"text":"impl&lt;D&gt; Unpin for Hmac&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as BlockInput&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["httparse"] = [{"text":"impl Unpin for InvalidChunkSize","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; Unpin for Request&lt;'headers, 'buf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'buf: 'headers,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; Unpin for Response&lt;'headers, 'buf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'buf: 'headers,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Header&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Status&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hyper"] = [{"text":"impl Unpin for Client","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for RequestBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, S&gt; Unpin for ProxyConfig&lt;C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Body&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for RedirectPolicy","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Unpin for Pool&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Config","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Unpin for PooledStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for Request&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Response","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for Method","synthetic":true,"types":[]},{"text":"impl Unpin for EntityTag","synthetic":true,"types":[]},{"text":"impl Unpin for HttpDate","synthetic":true,"types":[]},{"text":"impl Unpin for Quality","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for QualityItem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Accept","synthetic":true,"types":[]},{"text":"impl Unpin for AccessControlAllowCredentials","synthetic":true,"types":[]},{"text":"impl Unpin for AccessControlAllowHeaders","synthetic":true,"types":[]},{"text":"impl Unpin for AccessControlAllowMethods","synthetic":true,"types":[]},{"text":"impl Unpin for AccessControlExposeHeaders","synthetic":true,"types":[]},{"text":"impl Unpin for AccessControlMaxAge","synthetic":true,"types":[]},{"text":"impl Unpin for AccessControlRequestHeaders","synthetic":true,"types":[]},{"text":"impl Unpin for AccessControlRequestMethod","synthetic":true,"types":[]},{"text":"impl Unpin for AcceptCharset","synthetic":true,"types":[]},{"text":"impl Unpin for AcceptEncoding","synthetic":true,"types":[]},{"text":"impl Unpin for AcceptLanguage","synthetic":true,"types":[]},{"text":"impl Unpin for AcceptRanges","synthetic":true,"types":[]},{"text":"impl Unpin for Allow","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Unpin for Authorization&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Basic","synthetic":true,"types":[]},{"text":"impl Unpin for Bearer","synthetic":true,"types":[]},{"text":"impl Unpin for CacheControl","synthetic":true,"types":[]},{"text":"impl Unpin for Connection","synthetic":true,"types":[]},{"text":"impl Unpin for ContentDisposition","synthetic":true,"types":[]},{"text":"impl Unpin for ContentLength","synthetic":true,"types":[]},{"text":"impl Unpin for ContentEncoding","synthetic":true,"types":[]},{"text":"impl Unpin for ContentLanguage","synthetic":true,"types":[]},{"text":"impl Unpin for ContentRange","synthetic":true,"types":[]},{"text":"impl Unpin for ContentType","synthetic":true,"types":[]},{"text":"impl Unpin for Cookie","synthetic":true,"types":[]},{"text":"impl Unpin for Date","synthetic":true,"types":[]},{"text":"impl Unpin for ETag","synthetic":true,"types":[]},{"text":"impl Unpin for Expires","synthetic":true,"types":[]},{"text":"impl Unpin for From","synthetic":true,"types":[]},{"text":"impl Unpin for Host","synthetic":true,"types":[]},{"text":"impl Unpin for IfModifiedSince","synthetic":true,"types":[]},{"text":"impl Unpin for IfUnmodifiedSince","synthetic":true,"types":[]},{"text":"impl Unpin for LastModified","synthetic":true,"types":[]},{"text":"impl Unpin for Location","synthetic":true,"types":[]},{"text":"impl Unpin for Origin","synthetic":true,"types":[]},{"text":"impl Unpin for Prefer","synthetic":true,"types":[]},{"text":"impl Unpin for PreferenceApplied","synthetic":true,"types":[]},{"text":"impl Unpin for Referer","synthetic":true,"types":[]},{"text":"impl Unpin for Server","synthetic":true,"types":[]},{"text":"impl Unpin for SetCookie","synthetic":true,"types":[]},{"text":"impl Unpin for StrictTransportSecurity","synthetic":true,"types":[]},{"text":"impl Unpin for TransferEncoding","synthetic":true,"types":[]},{"text":"impl Unpin for Upgrade","synthetic":true,"types":[]},{"text":"impl Unpin for Protocol","synthetic":true,"types":[]},{"text":"impl Unpin for UserAgent","synthetic":true,"types":[]},{"text":"impl Unpin for Link","synthetic":true,"types":[]},{"text":"impl Unpin for LinkValue","synthetic":true,"types":[]},{"text":"impl Unpin for Headers","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for HeadersItems&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for HeaderView&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, H&gt; Unpin for HeaderFormatter&lt;'a, H&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Charset","synthetic":true,"types":[]},{"text":"impl Unpin for Encoding","synthetic":true,"types":[]},{"text":"impl Unpin for AccessControlAllowOrigin","synthetic":true,"types":[]},{"text":"impl Unpin for RangeUnit","synthetic":true,"types":[]},{"text":"impl Unpin for CacheDirective","synthetic":true,"types":[]},{"text":"impl Unpin for ConnectionOption","synthetic":true,"types":[]},{"text":"impl Unpin for DispositionType","synthetic":true,"types":[]},{"text":"impl Unpin for DispositionParam","synthetic":true,"types":[]},{"text":"impl Unpin for ContentRangeSpec","synthetic":true,"types":[]},{"text":"impl Unpin for Expect","synthetic":true,"types":[]},{"text":"impl Unpin for IfMatch","synthetic":true,"types":[]},{"text":"impl Unpin for IfNoneMatch","synthetic":true,"types":[]},{"text":"impl Unpin for IfRange","synthetic":true,"types":[]},{"text":"impl Unpin for Pragma","synthetic":true,"types":[]},{"text":"impl Unpin for Preference","synthetic":true,"types":[]},{"text":"impl Unpin for Range","synthetic":true,"types":[]},{"text":"impl Unpin for ByteRangeSpec","synthetic":true,"types":[]},{"text":"impl Unpin for ReferrerPolicy","synthetic":true,"types":[]},{"text":"impl Unpin for ProtocolName","synthetic":true,"types":[]},{"text":"impl Unpin for Vary","synthetic":true,"types":[]},{"text":"impl Unpin for RelationType","synthetic":true,"types":[]},{"text":"impl Unpin for MediaDesc","synthetic":true,"types":[]},{"text":"impl Unpin for ExtendedValue","synthetic":true,"types":[]},{"text":"impl Unpin for HTTP_VALUE","synthetic":true,"types":[]},{"text":"impl Unpin for RawStatus","synthetic":true,"types":[]},{"text":"impl Unpin for Http11Message","synthetic":true,"types":[]},{"text":"impl Unpin for Http11Protocol","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for EndError&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Unpin for Incoming&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for HttpReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for HttpWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for RequestHead","synthetic":true,"types":[]},{"text":"impl Unpin for ResponseHead","synthetic":true,"types":[]},{"text":"impl&lt;'a, N&gt; Unpin for NetworkConnections&lt;'a, N&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for HttpListener","synthetic":true,"types":[]},{"text":"impl Unpin for HttpStream","synthetic":true,"types":[]},{"text":"impl Unpin for HttpConnector","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Unpin for HttpsListener&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, C&gt; Unpin for HttpsConnector&lt;S, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Fresh","synthetic":true,"types":[]},{"text":"impl Unpin for Streaming","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Unpin for HttpsStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; Unpin for Server&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Listening","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for Request&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'b: 'a,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Unpin for Response&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for StatusCode","synthetic":true,"types":[]},{"text":"impl Unpin for StatusClass","synthetic":true,"types":[]},{"text":"impl Unpin for RequestUri","synthetic":true,"types":[]},{"text":"impl Unpin for HttpVersion","synthetic":true,"types":[]}];
implementors["hyper_sync_rustls"] = [{"text":"impl&lt;S, U&gt; Unpin for TlsStream&lt;S, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U&gt; Unpin for WrappedStream&lt;S, U&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for TlsClient","synthetic":true,"types":[]},{"text":"impl Unpin for TlsServer","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]}];
implementors["idna"] = [{"text":"impl Unpin for Flags","synthetic":true,"types":[]},{"text":"impl Unpin for Errors","synthetic":true,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;'a, K, V&gt; Unpin for OccupiedEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for VacantEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Unpin for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for Keys&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for Values&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for ValuesMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Unpin for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for Drain&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for Entry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Unpin for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Unpin for Difference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Unpin for Intersection&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S1, S2&gt; Unpin for SymmetricDifference&lt;'a, T, S1, S2&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Unpin for Union&lt;'a, T, S&gt;","synthetic":true,"types":[]}];
implementors["inotify"] = [{"text":"impl&lt;S&gt; Unpin for Event&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for EventMask","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Events&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Inotify","synthetic":true,"types":[]},{"text":"impl Unpin for WatchDescriptor","synthetic":true,"types":[]},{"text":"impl Unpin for WatchMask","synthetic":true,"types":[]}];
implementors["inotify_sys"] = [{"text":"impl Unpin for inotify_event","synthetic":true,"types":[]}];
implementors["iovec"] = [{"text":"impl Unpin for IoVec","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl Unpin for Buffer","synthetic":true,"types":[]}];
implementors["jwt"] = [{"text":"impl&lt;H, C, S&gt; Unpin for Token&lt;H, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for AlgorithmType","synthetic":true,"types":[]},{"text":"impl Unpin for Claims","synthetic":true,"types":[]},{"text":"impl Unpin for RegisteredClaims","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for Header","synthetic":true,"types":[]},{"text":"impl Unpin for PrecomputedAlgorithmOnlyHeader","synthetic":true,"types":[]},{"text":"impl Unpin for HeaderType","synthetic":true,"types":[]},{"text":"impl Unpin for HeaderContentType","synthetic":true,"types":[]},{"text":"impl Unpin for Unsigned","synthetic":true,"types":[]},{"text":"impl Unpin for Signed","synthetic":true,"types":[]},{"text":"impl Unpin for Verified","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Unverified&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["language_tags"] = [{"text":"impl Unpin for LanguageTag","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]}];
implementors["lazycell"] = [{"text":"impl&lt;T&gt; Unpin for LazyCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for AtomicLazyCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl Unpin for group","synthetic":true,"types":[]},{"text":"impl Unpin for utimbuf","synthetic":true,"types":[]},{"text":"impl Unpin for timeval","synthetic":true,"types":[]},{"text":"impl Unpin for timespec","synthetic":true,"types":[]},{"text":"impl Unpin for rlimit","synthetic":true,"types":[]},{"text":"impl Unpin for rusage","synthetic":true,"types":[]},{"text":"impl Unpin for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl Unpin for hostent","synthetic":true,"types":[]},{"text":"impl Unpin for iovec","synthetic":true,"types":[]},{"text":"impl Unpin for pollfd","synthetic":true,"types":[]},{"text":"impl Unpin for winsize","synthetic":true,"types":[]},{"text":"impl Unpin for linger","synthetic":true,"types":[]},{"text":"impl Unpin for sigval","synthetic":true,"types":[]},{"text":"impl Unpin for itimerval","synthetic":true,"types":[]},{"text":"impl Unpin for tms","synthetic":true,"types":[]},{"text":"impl Unpin for servent","synthetic":true,"types":[]},{"text":"impl Unpin for protoent","synthetic":true,"types":[]},{"text":"impl Unpin for in_addr","synthetic":true,"types":[]},{"text":"impl Unpin for ip_mreq","synthetic":true,"types":[]},{"text":"impl Unpin for ip_mreq_source","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl Unpin for addrinfo","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_ll","synthetic":true,"types":[]},{"text":"impl Unpin for fd_set","synthetic":true,"types":[]},{"text":"impl Unpin for tm","synthetic":true,"types":[]},{"text":"impl Unpin for sched_param","synthetic":true,"types":[]},{"text":"impl Unpin for Dl_info","synthetic":true,"types":[]},{"text":"impl Unpin for lconv","synthetic":true,"types":[]},{"text":"impl Unpin for in_pktinfo","synthetic":true,"types":[]},{"text":"impl Unpin for ifaddrs","synthetic":true,"types":[]},{"text":"impl Unpin for in6_rtmsg","synthetic":true,"types":[]},{"text":"impl Unpin for arpreq","synthetic":true,"types":[]},{"text":"impl Unpin for arpreq_old","synthetic":true,"types":[]},{"text":"impl Unpin for arphdr","synthetic":true,"types":[]},{"text":"impl Unpin for mmsghdr","synthetic":true,"types":[]},{"text":"impl Unpin for epoll_event","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Unpin for utsname","synthetic":true,"types":[]},{"text":"impl Unpin for sigevent","synthetic":true,"types":[]},{"text":"impl Unpin for rlimit64","synthetic":true,"types":[]},{"text":"impl Unpin for glob_t","synthetic":true,"types":[]},{"text":"impl Unpin for passwd","synthetic":true,"types":[]},{"text":"impl Unpin for spwd","synthetic":true,"types":[]},{"text":"impl Unpin for dqblk","synthetic":true,"types":[]},{"text":"impl Unpin for signalfd_siginfo","synthetic":true,"types":[]},{"text":"impl Unpin for itimerspec","synthetic":true,"types":[]},{"text":"impl Unpin for fsid_t","synthetic":true,"types":[]},{"text":"impl Unpin for packet_mreq","synthetic":true,"types":[]},{"text":"impl Unpin for cpu_set_t","synthetic":true,"types":[]},{"text":"impl Unpin for if_nameindex","synthetic":true,"types":[]},{"text":"impl Unpin for msginfo","synthetic":true,"types":[]},{"text":"impl Unpin for sembuf","synthetic":true,"types":[]},{"text":"impl Unpin for input_event","synthetic":true,"types":[]},{"text":"impl Unpin for input_id","synthetic":true,"types":[]},{"text":"impl Unpin for input_absinfo","synthetic":true,"types":[]},{"text":"impl Unpin for input_keymap_entry","synthetic":true,"types":[]},{"text":"impl Unpin for input_mask","synthetic":true,"types":[]},{"text":"impl Unpin for ff_replay","synthetic":true,"types":[]},{"text":"impl Unpin for ff_trigger","synthetic":true,"types":[]},{"text":"impl Unpin for ff_envelope","synthetic":true,"types":[]},{"text":"impl Unpin for ff_constant_effect","synthetic":true,"types":[]},{"text":"impl Unpin for ff_ramp_effect","synthetic":true,"types":[]},{"text":"impl Unpin for ff_condition_effect","synthetic":true,"types":[]},{"text":"impl Unpin for ff_periodic_effect","synthetic":true,"types":[]},{"text":"impl Unpin for ff_rumble_effect","synthetic":true,"types":[]},{"text":"impl Unpin for ff_effect","synthetic":true,"types":[]},{"text":"impl Unpin for dl_phdr_info","synthetic":true,"types":[]},{"text":"impl Unpin for Elf32_Ehdr","synthetic":true,"types":[]},{"text":"impl Unpin for Elf64_Ehdr","synthetic":true,"types":[]},{"text":"impl Unpin for Elf32_Sym","synthetic":true,"types":[]},{"text":"impl Unpin for Elf64_Sym","synthetic":true,"types":[]},{"text":"impl Unpin for Elf32_Phdr","synthetic":true,"types":[]},{"text":"impl Unpin for Elf64_Phdr","synthetic":true,"types":[]},{"text":"impl Unpin for Elf32_Shdr","synthetic":true,"types":[]},{"text":"impl Unpin for Elf64_Shdr","synthetic":true,"types":[]},{"text":"impl Unpin for Elf32_Chdr","synthetic":true,"types":[]},{"text":"impl Unpin for Elf64_Chdr","synthetic":true,"types":[]},{"text":"impl Unpin for ucred","synthetic":true,"types":[]},{"text":"impl Unpin for mntent","synthetic":true,"types":[]},{"text":"impl Unpin for posix_spawn_file_actions_t","synthetic":true,"types":[]},{"text":"impl Unpin for posix_spawnattr_t","synthetic":true,"types":[]},{"text":"impl Unpin for genlmsghdr","synthetic":true,"types":[]},{"text":"impl Unpin for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Unpin for arpd_request","synthetic":true,"types":[]},{"text":"impl Unpin for inotify_event","synthetic":true,"types":[]},{"text":"impl Unpin for fanotify_response","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_vm","synthetic":true,"types":[]},{"text":"impl Unpin for regmatch_t","synthetic":true,"types":[]},{"text":"impl Unpin for sock_extended_err","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_nl","synthetic":true,"types":[]},{"text":"impl Unpin for dirent","synthetic":true,"types":[]},{"text":"impl Unpin for dirent64","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_alg","synthetic":true,"types":[]},{"text":"impl Unpin for af_alg_iv","synthetic":true,"types":[]},{"text":"impl Unpin for mq_attr","synthetic":true,"types":[]},{"text":"impl Unpin for statx","synthetic":true,"types":[]},{"text":"impl Unpin for statx_timestamp","synthetic":true,"types":[]},{"text":"impl Unpin for aiocb","synthetic":true,"types":[]},{"text":"impl Unpin for __exit_status","synthetic":true,"types":[]},{"text":"impl Unpin for __timeval","synthetic":true,"types":[]},{"text":"impl Unpin for glob64_t","synthetic":true,"types":[]},{"text":"impl Unpin for msghdr","synthetic":true,"types":[]},{"text":"impl Unpin for cmsghdr","synthetic":true,"types":[]},{"text":"impl Unpin for termios","synthetic":true,"types":[]},{"text":"impl Unpin for mallinfo","synthetic":true,"types":[]},{"text":"impl Unpin for nlmsghdr","synthetic":true,"types":[]},{"text":"impl Unpin for nlmsgerr","synthetic":true,"types":[]},{"text":"impl Unpin for nl_pktinfo","synthetic":true,"types":[]},{"text":"impl Unpin for nl_mmap_req","synthetic":true,"types":[]},{"text":"impl Unpin for nl_mmap_hdr","synthetic":true,"types":[]},{"text":"impl Unpin for nlattr","synthetic":true,"types":[]},{"text":"impl Unpin for rtentry","synthetic":true,"types":[]},{"text":"impl Unpin for timex","synthetic":true,"types":[]},{"text":"impl Unpin for ntptimeval","synthetic":true,"types":[]},{"text":"impl Unpin for regex_t","synthetic":true,"types":[]},{"text":"impl Unpin for utmpx","synthetic":true,"types":[]},{"text":"impl Unpin for sigset_t","synthetic":true,"types":[]},{"text":"impl Unpin for sysinfo","synthetic":true,"types":[]},{"text":"impl Unpin for msqid_ds","synthetic":true,"types":[]},{"text":"impl Unpin for sigaction","synthetic":true,"types":[]},{"text":"impl Unpin for statfs","synthetic":true,"types":[]},{"text":"impl Unpin for flock","synthetic":true,"types":[]},{"text":"impl Unpin for flock64","synthetic":true,"types":[]},{"text":"impl Unpin for siginfo_t","synthetic":true,"types":[]},{"text":"impl Unpin for stack_t","synthetic":true,"types":[]},{"text":"impl Unpin for stat","synthetic":true,"types":[]},{"text":"impl Unpin for stat64","synthetic":true,"types":[]},{"text":"impl Unpin for statfs64","synthetic":true,"types":[]},{"text":"impl Unpin for statvfs64","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Unpin for _libc_fpxreg","synthetic":true,"types":[]},{"text":"impl Unpin for _libc_xmmreg","synthetic":true,"types":[]},{"text":"impl Unpin for _libc_fpstate","synthetic":true,"types":[]},{"text":"impl Unpin for user_regs_struct","synthetic":true,"types":[]},{"text":"impl Unpin for user","synthetic":true,"types":[]},{"text":"impl Unpin for mcontext_t","synthetic":true,"types":[]},{"text":"impl Unpin for ipc_perm","synthetic":true,"types":[]},{"text":"impl Unpin for shmid_ds","synthetic":true,"types":[]},{"text":"impl Unpin for termios2","synthetic":true,"types":[]},{"text":"impl Unpin for ip_mreqn","synthetic":true,"types":[]},{"text":"impl Unpin for user_fpregs_struct","synthetic":true,"types":[]},{"text":"impl Unpin for ucontext_t","synthetic":true,"types":[]},{"text":"impl Unpin for statvfs","synthetic":true,"types":[]},{"text":"impl Unpin for max_align_t","synthetic":true,"types":[]},{"text":"impl Unpin for sem_t","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Unpin for fanotify_event_metadata","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Unpin for in6_addr","synthetic":true,"types":[]},{"text":"impl Unpin for DIR","synthetic":true,"types":[]},{"text":"impl Unpin for FILE","synthetic":true,"types":[]},{"text":"impl Unpin for fpos_t","synthetic":true,"types":[]},{"text":"impl Unpin for timezone","synthetic":true,"types":[]},{"text":"impl Unpin for fpos64_t","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'a&gt; Unpin for LogRecord&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for LogMetadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for LogLocation","synthetic":true,"types":[]},{"text":"impl Unpin for MaxLogLevelFilter","synthetic":true,"types":[]},{"text":"impl Unpin for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Unpin for ShutdownLoggerError","synthetic":true,"types":[]},{"text":"impl Unpin for LogLevel","synthetic":true,"types":[]},{"text":"impl Unpin for LogLevelFilter","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; Unpin for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["mime"] = [{"text":"impl&lt;T&gt; Unpin for Mime&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for TopLevel","synthetic":true,"types":[]},{"text":"impl Unpin for SubLevel","synthetic":true,"types":[]},{"text":"impl Unpin for Attr","synthetic":true,"types":[]},{"text":"impl Unpin for Value","synthetic":true,"types":[]}];
implementors["mio"] = [{"text":"impl Unpin for Poll","synthetic":true,"types":[]},{"text":"impl Unpin for Registration","synthetic":true,"types":[]},{"text":"impl Unpin for SetReadiness","synthetic":true,"types":[]},{"text":"impl Unpin for PollOpt","synthetic":true,"types":[]},{"text":"impl Unpin for Ready","synthetic":true,"types":[]},{"text":"impl Unpin for Token","synthetic":true,"types":[]},{"text":"impl Unpin for Events","synthetic":true,"types":[]},{"text":"impl Unpin for Event","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for EventedFd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for UnixReady","synthetic":true,"types":[]},{"text":"impl Unpin for TcpListener","synthetic":true,"types":[]},{"text":"impl Unpin for TcpStream","synthetic":true,"types":[]},{"text":"impl Unpin for UdpSocket","synthetic":true,"types":[]}];
implementors["mio_extras"] = [{"text":"impl&lt;T&gt; Unpin for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for SyncSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Timer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Builder","synthetic":true,"types":[]},{"text":"impl Unpin for Timeout","synthetic":true,"types":[]}];
implementors["net2"] = [{"text":"impl Unpin for TcpBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for UdpBuilder","synthetic":true,"types":[]}];
implementors["notify"] = [{"text":"impl Unpin for RawEvent","synthetic":true,"types":[]},{"text":"impl Unpin for DebouncedEvent","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for RecursiveMode","synthetic":true,"types":[]},{"text":"impl Unpin for INotifyWatcher","synthetic":true,"types":[]},{"text":"impl Unpin for NullWatcher","synthetic":true,"types":[]},{"text":"impl Unpin for PollWatcher","synthetic":true,"types":[]},{"text":"impl Unpin for Op","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Unpin for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Unpin for ParseFloatError","synthetic":true,"types":[]},{"text":"impl Unpin for FloatErrorKind","synthetic":true,"types":[]}];
implementors["pear"] = [{"text":"impl&lt;'a&gt; Unpin for Position&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Text&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; Unpin for StringFile&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for ParseErr&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Input&gt;::Context: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Input&gt;::InSlice: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Input&gt;::Slice: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Input&gt;::Token: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I, S&gt; Unpin for Expected&lt;T, I, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl Unpin for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["polyval"] = [{"text":"impl Unpin for Polyval","synthetic":true,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Unpin for YesS3","synthetic":true,"types":[]},{"text":"impl Unpin for NoS3","synthetic":true,"types":[]},{"text":"impl Unpin for YesS4","synthetic":true,"types":[]},{"text":"impl Unpin for NoS4","synthetic":true,"types":[]},{"text":"impl Unpin for YesA1","synthetic":true,"types":[]},{"text":"impl Unpin for NoA1","synthetic":true,"types":[]},{"text":"impl Unpin for YesA2","synthetic":true,"types":[]},{"text":"impl Unpin for NoA2","synthetic":true,"types":[]},{"text":"impl Unpin for YesNI","synthetic":true,"types":[]},{"text":"impl Unpin for NoNI","synthetic":true,"types":[]},{"text":"impl&lt;S3, S4, NI&gt; Unpin for SseMachine&lt;S3, S4, NI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NI: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;S3: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;S4: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;NI&gt; Unpin for Avx2Machine&lt;NI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NI: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for vec128_storage","synthetic":true,"types":[]},{"text":"impl Unpin for vec256_storage","synthetic":true,"types":[]},{"text":"impl Unpin for vec512_storage","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Unpin for TokenStream","synthetic":true,"types":[]},{"text":"impl Unpin for LexError","synthetic":true,"types":[]},{"text":"impl Unpin for Span","synthetic":true,"types":[]},{"text":"impl Unpin for Group","synthetic":true,"types":[]},{"text":"impl Unpin for Punct","synthetic":true,"types":[]},{"text":"impl Unpin for Ident","synthetic":true,"types":[]},{"text":"impl Unpin for Literal","synthetic":true,"types":[]},{"text":"impl Unpin for TokenTree","synthetic":true,"types":[]},{"text":"impl Unpin for Delimiter","synthetic":true,"types":[]},{"text":"impl Unpin for Spacing","synthetic":true,"types":[]},{"text":"impl Unpin for IntoIter","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl Unpin for Bernoulli","synthetic":true,"types":[]},{"text":"impl Unpin for Open01","synthetic":true,"types":[]},{"text":"impl Unpin for OpenClosed01","synthetic":true,"types":[]},{"text":"impl Unpin for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Unpin for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Binomial","synthetic":true,"types":[]},{"text":"impl Unpin for Cauchy","synthetic":true,"types":[]},{"text":"impl Unpin for Dirichlet","synthetic":true,"types":[]},{"text":"impl Unpin for Exp","synthetic":true,"types":[]},{"text":"impl Unpin for Exp1","synthetic":true,"types":[]},{"text":"impl Unpin for Beta","synthetic":true,"types":[]},{"text":"impl Unpin for ChiSquared","synthetic":true,"types":[]},{"text":"impl Unpin for FisherF","synthetic":true,"types":[]},{"text":"impl Unpin for Gamma","synthetic":true,"types":[]},{"text":"impl Unpin for StudentT","synthetic":true,"types":[]},{"text":"impl Unpin for LogNormal","synthetic":true,"types":[]},{"text":"impl Unpin for Normal","synthetic":true,"types":[]},{"text":"impl Unpin for StandardNormal","synthetic":true,"types":[]},{"text":"impl Unpin for Pareto","synthetic":true,"types":[]},{"text":"impl Unpin for Poisson","synthetic":true,"types":[]},{"text":"impl Unpin for Triangular","synthetic":true,"types":[]},{"text":"impl Unpin for UnitCircle","synthetic":true,"types":[]},{"text":"impl Unpin for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl Unpin for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; Unpin for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Standard","synthetic":true,"types":[]},{"text":"impl Unpin for BernoulliError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Unpin for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Unpin for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Unpin for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for WeightedError","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for EntropyRng","synthetic":true,"types":[]},{"text":"impl Unpin for StdRng","synthetic":true,"types":[]},{"text":"impl Unpin for ThreadRng","synthetic":true,"types":[]},{"text":"impl Unpin for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Unpin for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for StepRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; Unpin for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for IndexVecIntoIter","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Unpin for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl Unpin for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl Unpin for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl Unpin for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl Unpin for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl Unpin for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Unpin for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Unpin for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ring"] = [{"text":"impl Unpin for OpeningKey","synthetic":true,"types":[]},{"text":"impl Unpin for SealingKey","synthetic":true,"types":[]},{"text":"impl Unpin for Algorithm","synthetic":true,"types":[]},{"text":"impl Unpin for SealingKey","synthetic":true,"types":[]},{"text":"impl Unpin for OpeningKey","synthetic":true,"types":[]},{"text":"impl Unpin for Algorithm","synthetic":true,"types":[]},{"text":"impl Unpin for EphemeralPrivateKey","synthetic":true,"types":[]},{"text":"impl Unpin for Context","synthetic":true,"types":[]},{"text":"impl Unpin for Digest","synthetic":true,"types":[]},{"text":"impl Unpin for Algorithm","synthetic":true,"types":[]},{"text":"impl Unpin for KeyPair","synthetic":true,"types":[]},{"text":"impl Unpin for EdDSAParameters","synthetic":true,"types":[]},{"text":"impl Unpin for Key","synthetic":true,"types":[]},{"text":"impl Unpin for Algorithm","synthetic":true,"types":[]},{"text":"impl Unpin for Unspecified","synthetic":true,"types":[]},{"text":"impl Unpin for Signature","synthetic":true,"types":[]},{"text":"impl Unpin for SigningKey","synthetic":true,"types":[]},{"text":"impl Unpin for SigningContext","synthetic":true,"types":[]},{"text":"impl Unpin for VerificationKey","synthetic":true,"types":[]},{"text":"impl Unpin for SystemRandom","synthetic":true,"types":[]},{"text":"impl Unpin for RSAParameters","synthetic":true,"types":[]},{"text":"impl Unpin for KeyPair","synthetic":true,"types":[]},{"text":"impl Unpin for SigningState","synthetic":true,"types":[]},{"text":"impl Unpin for Signature","synthetic":true,"types":[]},{"text":"impl Unpin for KeyPair","synthetic":true,"types":[]},{"text":"impl Unpin for TestCase","synthetic":true,"types":[]},{"text":"impl Unpin for FixedByteRandom","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for FixedSliceRandom&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for FixedSliceSequenceRandom&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["rocket"] = [{"text":"impl&lt;'r&gt; Unpin for Response&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Data","synthetic":true,"types":[]},{"text":"impl Unpin for Config","synthetic":true,"types":[]},{"text":"impl Unpin for Route","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Unpin for Request&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, T&gt; Unpin for State&lt;'r, T&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Catcher","synthetic":true,"types":[]},{"text":"impl Unpin for Rocket","synthetic":true,"types":[]},{"text":"impl&lt;S, E, F&gt; Unpin for Outcome&lt;S, E, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for LoggingLevel","synthetic":true,"types":[]},{"text":"impl&lt;'c&gt; Unpin for LocalResponse&lt;'c&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c&gt; Unpin for LocalRequest&lt;'c&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Client","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Form&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for LenientForm&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Unpin for FormItem&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'q&gt; Unpin for Query&lt;'q&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Unpin for FormItems&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Unpin for FormParseError&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f, E&gt; Unpin for FormDataError&lt;'f, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Unpin for ResponseBuilder&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Redirect","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for Flash&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for NamedFile","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Stream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for Debug&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for Content&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Body&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for Json&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for Xml&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for MsgPack&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for Html&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for Plain&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for Css&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for JavaScript&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for Created&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for Accepted&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for NoContent","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for BadRequest&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for Unauthorized&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for Forbidden&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for NotFound&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for Conflict&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for Custom&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Limits","synthetic":true,"types":[]},{"text":"impl Unpin for ConfigBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for ConfigError","synthetic":true,"types":[]},{"text":"impl Unpin for Environment","synthetic":true,"types":[]},{"text":"impl Unpin for DataStream","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Unpin for Transform&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for AdHoc","synthetic":true,"types":[]},{"text":"impl Unpin for Info","synthetic":true,"types":[]},{"text":"impl Unpin for Kind","synthetic":true,"types":[]},{"text":"impl Unpin for LaunchError","synthetic":true,"types":[]},{"text":"impl Unpin for LaunchErrorKind","synthetic":true,"types":[]},{"text":"impl Unpin for RouteUriError","synthetic":true,"types":[]}];
implementors["rocket_contrib"] = [{"text":"impl&lt;T&gt; Unpin for Json&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for JsonValue","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for JsonError&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Options","synthetic":true,"types":[]},{"text":"impl Unpin for StaticFiles","synthetic":true,"types":[]}];
implementors["rocket_http"] = [{"text":"impl Unpin for ContentType","synthetic":true,"types":[]},{"text":"impl Unpin for Accept","synthetic":true,"types":[]},{"text":"impl Unpin for QMediaType","synthetic":true,"types":[]},{"text":"impl Unpin for Status","synthetic":true,"types":[]},{"text":"impl&lt;'h&gt; Unpin for Header&lt;'h&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'h&gt; Unpin for HeaderMap&lt;'h&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for RawStr","synthetic":true,"types":[]},{"text":"impl Unpin for MediaType","synthetic":true,"types":[]},{"text":"impl Unpin for Method","synthetic":true,"types":[]},{"text":"impl Unpin for StatusClass","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Cookies&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Error&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Authority&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Origin&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Absolute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, P&gt; Unpin for Formatter&lt;'i, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Segments&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Uri&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for SegmentError","synthetic":true,"types":[]},{"text":"impl Unpin for Path","synthetic":true,"types":[]},{"text":"impl Unpin for Query","synthetic":true,"types":[]},{"text":"impl Unpin for UncasedStr","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; Unpin for Uncased&lt;'s&gt;","synthetic":true,"types":[]}];
implementors["rustls"] = [{"text":"impl&lt;'a, S:&nbsp;?Sized, T:&nbsp;?Sized&gt; Unpin for Stream&lt;'a, S, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Unpin for StreamOwned&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for RootCertStore","synthetic":true,"types":[]},{"text":"impl Unpin for NoClientSessionStorage","synthetic":true,"types":[]},{"text":"impl Unpin for ClientSessionMemoryCache","synthetic":true,"types":[]},{"text":"impl Unpin for ClientConfig","synthetic":true,"types":[]},{"text":"impl Unpin for ClientSession","synthetic":true,"types":[]},{"text":"impl Unpin for NoServerSessionStorage","synthetic":true,"types":[]},{"text":"impl Unpin for ServerSessionMemoryCache","synthetic":true,"types":[]},{"text":"impl Unpin for ServerConfig","synthetic":true,"types":[]},{"text":"impl Unpin for ServerSession","synthetic":true,"types":[]},{"text":"impl Unpin for ResolvesServerCertUsingSNI","synthetic":true,"types":[]},{"text":"impl Unpin for Ticketer","synthetic":true,"types":[]},{"text":"impl Unpin for NoClientAuth","synthetic":true,"types":[]},{"text":"impl Unpin for AllowAnyAuthenticatedClient","synthetic":true,"types":[]},{"text":"impl Unpin for AllowAnyAnonymousOrAuthenticatedClient","synthetic":true,"types":[]},{"text":"impl Unpin for SupportedCipherSuite","synthetic":true,"types":[]},{"text":"impl Unpin for Certificate","synthetic":true,"types":[]},{"text":"impl Unpin for PrivateKey","synthetic":true,"types":[]},{"text":"impl Unpin for NoKeyLog","synthetic":true,"types":[]},{"text":"impl Unpin for KeyLogFile","synthetic":true,"types":[]},{"text":"impl Unpin for ProtocolVersion","synthetic":true,"types":[]},{"text":"impl Unpin for SignatureScheme","synthetic":true,"types":[]},{"text":"impl Unpin for CipherSuite","synthetic":true,"types":[]},{"text":"impl Unpin for TLSError","synthetic":true,"types":[]},{"text":"impl Unpin for BulkAlgorithm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Reader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for u24","synthetic":true,"types":[]},{"text":"impl Unpin for Payload","synthetic":true,"types":[]},{"text":"impl Unpin for PayloadU24","synthetic":true,"types":[]},{"text":"impl Unpin for PayloadU16","synthetic":true,"types":[]},{"text":"impl Unpin for PayloadU8","synthetic":true,"types":[]},{"text":"impl Unpin for HashAlgorithm","synthetic":true,"types":[]},{"text":"impl Unpin for SignatureAlgorithm","synthetic":true,"types":[]},{"text":"impl Unpin for ClientCertificateType","synthetic":true,"types":[]},{"text":"impl Unpin for Compression","synthetic":true,"types":[]},{"text":"impl Unpin for ContentType","synthetic":true,"types":[]},{"text":"impl Unpin for HandshakeType","synthetic":true,"types":[]},{"text":"impl Unpin for AlertLevel","synthetic":true,"types":[]},{"text":"impl Unpin for AlertDescription","synthetic":true,"types":[]},{"text":"impl Unpin for HeartbeatMessageType","synthetic":true,"types":[]},{"text":"impl Unpin for ExtensionType","synthetic":true,"types":[]},{"text":"impl Unpin for ServerNameType","synthetic":true,"types":[]},{"text":"impl Unpin for NamedCurve","synthetic":true,"types":[]},{"text":"impl Unpin for NamedGroup","synthetic":true,"types":[]},{"text":"impl Unpin for ECPointFormat","synthetic":true,"types":[]},{"text":"impl Unpin for HeartbeatMode","synthetic":true,"types":[]},{"text":"impl Unpin for ECCurveType","synthetic":true,"types":[]},{"text":"impl Unpin for PSKKeyExchangeMode","synthetic":true,"types":[]},{"text":"impl Unpin for KeyUpdateRequest","synthetic":true,"types":[]},{"text":"impl Unpin for CertificateStatusType","synthetic":true,"types":[]},{"text":"impl Unpin for AlertMessagePayload","synthetic":true,"types":[]},{"text":"impl Unpin for Random","synthetic":true,"types":[]},{"text":"impl Unpin for SessionID","synthetic":true,"types":[]},{"text":"impl Unpin for UnknownExtension","synthetic":true,"types":[]},{"text":"impl Unpin for ServerName","synthetic":true,"types":[]},{"text":"impl Unpin for KeyShareEntry","synthetic":true,"types":[]},{"text":"impl Unpin for PresharedKeyIdentity","synthetic":true,"types":[]},{"text":"impl Unpin for PresharedKeyOffer","synthetic":true,"types":[]},{"text":"impl Unpin for OCSPCertificateStatusRequest","synthetic":true,"types":[]},{"text":"impl Unpin for ClientHelloPayload","synthetic":true,"types":[]},{"text":"impl Unpin for HelloRetryRequest","synthetic":true,"types":[]},{"text":"impl Unpin for ServerHelloPayload","synthetic":true,"types":[]},{"text":"impl Unpin for CertificateEntry","synthetic":true,"types":[]},{"text":"impl Unpin for CertificatePayloadTLS13","synthetic":true,"types":[]},{"text":"impl Unpin for ECParameters","synthetic":true,"types":[]},{"text":"impl Unpin for DigitallySignedStruct","synthetic":true,"types":[]},{"text":"impl Unpin for ClientECDHParams","synthetic":true,"types":[]},{"text":"impl Unpin for ServerECDHParams","synthetic":true,"types":[]},{"text":"impl Unpin for ECDHEServerKeyExchange","synthetic":true,"types":[]},{"text":"impl Unpin for CertificateRequestPayload","synthetic":true,"types":[]},{"text":"impl Unpin for CertificateRequestPayloadTLS13","synthetic":true,"types":[]},{"text":"impl Unpin for NewSessionTicketPayload","synthetic":true,"types":[]},{"text":"impl Unpin for NewSessionTicketPayloadTLS13","synthetic":true,"types":[]},{"text":"impl Unpin for CertificateStatus","synthetic":true,"types":[]},{"text":"impl Unpin for HandshakeMessagePayload","synthetic":true,"types":[]},{"text":"impl Unpin for ServerNamePayload","synthetic":true,"types":[]},{"text":"impl Unpin for CertificateStatusRequest","synthetic":true,"types":[]},{"text":"impl Unpin for ClientExtension","synthetic":true,"types":[]},{"text":"impl Unpin for ServerExtension","synthetic":true,"types":[]},{"text":"impl Unpin for HelloRetryExtension","synthetic":true,"types":[]},{"text":"impl Unpin for CertificateExtension","synthetic":true,"types":[]},{"text":"impl Unpin for KeyExchangeAlgorithm","synthetic":true,"types":[]},{"text":"impl Unpin for ServerKeyExchangePayload","synthetic":true,"types":[]},{"text":"impl Unpin for CertReqExtension","synthetic":true,"types":[]},{"text":"impl Unpin for NewSessionTicketExtension","synthetic":true,"types":[]},{"text":"impl Unpin for HandshakePayload","synthetic":true,"types":[]},{"text":"impl Unpin for ChangeCipherSpecPayload","synthetic":true,"types":[]},{"text":"impl Unpin for Message","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for BorrowMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for MessagePayload","synthetic":true,"types":[]},{"text":"impl Unpin for ClientSessionKey","synthetic":true,"types":[]},{"text":"impl Unpin for ClientSessionValue","synthetic":true,"types":[]},{"text":"impl Unpin for ServerSessionValue","synthetic":true,"types":[]},{"text":"impl Unpin for MessageDeframer","synthetic":true,"types":[]},{"text":"impl Unpin for MessageFragmenter","synthetic":true,"types":[]},{"text":"impl Unpin for HandshakeJoiner","synthetic":true,"types":[]},{"text":"impl Unpin for CertifiedKey","synthetic":true,"types":[]},{"text":"impl Unpin for RSASigningKey","synthetic":true,"types":[]}];
implementors["ryu"] = [{"text":"impl Unpin for Buffer","synthetic":true,"types":[]}];
implementors["same_file"] = [{"text":"impl Unpin for Handle","synthetic":true,"types":[]}];
implementors["sct"] = [{"text":"impl&lt;'a&gt; Unpin for Log&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl Unpin for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Unpin for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Unpin for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Unpin for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Unpin for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Unpin for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Unpin for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Unpin for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;R&gt; Unpin for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; Unpin for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; Unpin for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Unpin for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Number","synthetic":true,"types":[]},{"text":"impl Unpin for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Category","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for CharEscape","synthetic":true,"types":[]},{"text":"impl Unpin for Serializer","synthetic":true,"types":[]}];
implementors["sha2"] = [{"text":"impl Unpin for Sha224","synthetic":true,"types":[]},{"text":"impl Unpin for Sha256","synthetic":true,"types":[]},{"text":"impl Unpin for Sha384","synthetic":true,"types":[]},{"text":"impl Unpin for Sha512","synthetic":true,"types":[]},{"text":"impl Unpin for Sha512Trunc224","synthetic":true,"types":[]},{"text":"impl Unpin for Sha512Trunc256","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T&gt; Unpin for Slab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Drain&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;'a, T&gt; Unpin for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for CollectionAllocErr","synthetic":true,"types":[]}];
implementors["ssmp_server"] = [{"text":"impl Unpin for RegisterRequest","synthetic":true,"types":[]},{"text":"impl Unpin for AuthRequest","synthetic":true,"types":[]},{"text":"impl Unpin for LoginRequest","synthetic":true,"types":[]},{"text":"impl Unpin for RegisterRecord","synthetic":true,"types":[]},{"text":"impl Unpin for LoginRecord","synthetic":true,"types":[]}];
implementors["state"] = [{"text":"impl Unpin for Container","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Storage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["subtle"] = [{"text":"impl Unpin for Choice","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl Unpin for Attribute","synthetic":true,"types":[]},{"text":"impl Unpin for MetaList","synthetic":true,"types":[]},{"text":"impl Unpin for MetaNameValue","synthetic":true,"types":[]},{"text":"impl Unpin for Field","synthetic":true,"types":[]},{"text":"impl Unpin for FieldsNamed","synthetic":true,"types":[]},{"text":"impl Unpin for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl Unpin for Variant","synthetic":true,"types":[]},{"text":"impl Unpin for VisCrate","synthetic":true,"types":[]},{"text":"impl Unpin for VisPublic","synthetic":true,"types":[]},{"text":"impl Unpin for VisRestricted","synthetic":true,"types":[]},{"text":"impl Unpin for ExprArray","synthetic":true,"types":[]},{"text":"impl Unpin for ExprAssign","synthetic":true,"types":[]},{"text":"impl Unpin for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl Unpin for ExprAsync","synthetic":true,"types":[]},{"text":"impl Unpin for ExprAwait","synthetic":true,"types":[]},{"text":"impl Unpin for ExprBinary","synthetic":true,"types":[]},{"text":"impl Unpin for ExprBlock","synthetic":true,"types":[]},{"text":"impl Unpin for ExprBox","synthetic":true,"types":[]},{"text":"impl Unpin for ExprBreak","synthetic":true,"types":[]},{"text":"impl Unpin for ExprCall","synthetic":true,"types":[]},{"text":"impl Unpin for ExprCast","synthetic":true,"types":[]},{"text":"impl Unpin for ExprClosure","synthetic":true,"types":[]},{"text":"impl Unpin for ExprContinue","synthetic":true,"types":[]},{"text":"impl Unpin for ExprField","synthetic":true,"types":[]},{"text":"impl Unpin for ExprForLoop","synthetic":true,"types":[]},{"text":"impl Unpin for ExprGroup","synthetic":true,"types":[]},{"text":"impl Unpin for ExprIf","synthetic":true,"types":[]},{"text":"impl Unpin for ExprIndex","synthetic":true,"types":[]},{"text":"impl Unpin for ExprLet","synthetic":true,"types":[]},{"text":"impl Unpin for ExprLit","synthetic":true,"types":[]},{"text":"impl Unpin for ExprLoop","synthetic":true,"types":[]},{"text":"impl Unpin for ExprMacro","synthetic":true,"types":[]},{"text":"impl Unpin for ExprMatch","synthetic":true,"types":[]},{"text":"impl Unpin for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl Unpin for ExprParen","synthetic":true,"types":[]},{"text":"impl Unpin for ExprPath","synthetic":true,"types":[]},{"text":"impl Unpin for ExprRange","synthetic":true,"types":[]},{"text":"impl Unpin for ExprReference","synthetic":true,"types":[]},{"text":"impl Unpin for ExprRepeat","synthetic":true,"types":[]},{"text":"impl Unpin for ExprReturn","synthetic":true,"types":[]},{"text":"impl Unpin for ExprStruct","synthetic":true,"types":[]},{"text":"impl Unpin for ExprTry","synthetic":true,"types":[]},{"text":"impl Unpin for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl Unpin for ExprTuple","synthetic":true,"types":[]},{"text":"impl Unpin for ExprType","synthetic":true,"types":[]},{"text":"impl Unpin for ExprUnary","synthetic":true,"types":[]},{"text":"impl Unpin for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl Unpin for ExprWhile","synthetic":true,"types":[]},{"text":"impl Unpin for ExprYield","synthetic":true,"types":[]},{"text":"impl Unpin for Index","synthetic":true,"types":[]},{"text":"impl Unpin for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl Unpin for ConstParam","synthetic":true,"types":[]},{"text":"impl Unpin for Generics","synthetic":true,"types":[]},{"text":"impl Unpin for LifetimeDef","synthetic":true,"types":[]},{"text":"impl Unpin for PredicateEq","synthetic":true,"types":[]},{"text":"impl Unpin for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl Unpin for PredicateType","synthetic":true,"types":[]},{"text":"impl Unpin for TraitBound","synthetic":true,"types":[]},{"text":"impl Unpin for TypeParam","synthetic":true,"types":[]},{"text":"impl Unpin for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Lifetime","synthetic":true,"types":[]},{"text":"impl Unpin for LitBool","synthetic":true,"types":[]},{"text":"impl Unpin for LitByte","synthetic":true,"types":[]},{"text":"impl Unpin for LitByteStr","synthetic":true,"types":[]},{"text":"impl Unpin for LitChar","synthetic":true,"types":[]},{"text":"impl Unpin for LitFloat","synthetic":true,"types":[]},{"text":"impl Unpin for LitInt","synthetic":true,"types":[]},{"text":"impl Unpin for LitStr","synthetic":true,"types":[]},{"text":"impl Unpin for Macro","synthetic":true,"types":[]},{"text":"impl Unpin for DataEnum","synthetic":true,"types":[]},{"text":"impl Unpin for DataStruct","synthetic":true,"types":[]},{"text":"impl Unpin for DataUnion","synthetic":true,"types":[]},{"text":"impl Unpin for DeriveInput","synthetic":true,"types":[]},{"text":"impl Unpin for Abi","synthetic":true,"types":[]},{"text":"impl Unpin for BareFnArg","synthetic":true,"types":[]},{"text":"impl Unpin for TypeArray","synthetic":true,"types":[]},{"text":"impl Unpin for TypeBareFn","synthetic":true,"types":[]},{"text":"impl Unpin for TypeGroup","synthetic":true,"types":[]},{"text":"impl Unpin for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl Unpin for TypeInfer","synthetic":true,"types":[]},{"text":"impl Unpin for TypeMacro","synthetic":true,"types":[]},{"text":"impl Unpin for TypeNever","synthetic":true,"types":[]},{"text":"impl Unpin for TypeParen","synthetic":true,"types":[]},{"text":"impl Unpin for TypePath","synthetic":true,"types":[]},{"text":"impl Unpin for TypePtr","synthetic":true,"types":[]},{"text":"impl Unpin for TypeReference","synthetic":true,"types":[]},{"text":"impl Unpin for TypeSlice","synthetic":true,"types":[]},{"text":"impl Unpin for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl Unpin for TypeTuple","synthetic":true,"types":[]},{"text":"impl Unpin for Variadic","synthetic":true,"types":[]},{"text":"impl Unpin for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl Unpin for Binding","synthetic":true,"types":[]},{"text":"impl Unpin for Constraint","synthetic":true,"types":[]},{"text":"impl Unpin for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl Unpin for Path","synthetic":true,"types":[]},{"text":"impl Unpin for PathSegment","synthetic":true,"types":[]},{"text":"impl Unpin for QSelf","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for AttrStyle","synthetic":true,"types":[]},{"text":"impl Unpin for Meta","synthetic":true,"types":[]},{"text":"impl Unpin for NestedMeta","synthetic":true,"types":[]},{"text":"impl Unpin for Fields","synthetic":true,"types":[]},{"text":"impl Unpin for Visibility","synthetic":true,"types":[]},{"text":"impl Unpin for Expr","synthetic":true,"types":[]},{"text":"impl Unpin for Member","synthetic":true,"types":[]},{"text":"impl Unpin for GenericParam","synthetic":true,"types":[]},{"text":"impl Unpin for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl Unpin for TypeParamBound","synthetic":true,"types":[]},{"text":"impl Unpin for WherePredicate","synthetic":true,"types":[]},{"text":"impl Unpin for Lit","synthetic":true,"types":[]},{"text":"impl Unpin for StrStyle","synthetic":true,"types":[]},{"text":"impl Unpin for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl Unpin for Data","synthetic":true,"types":[]},{"text":"impl Unpin for BinOp","synthetic":true,"types":[]},{"text":"impl Unpin for UnOp","synthetic":true,"types":[]},{"text":"impl Unpin for ReturnType","synthetic":true,"types":[]},{"text":"impl Unpin for Type","synthetic":true,"types":[]},{"text":"impl Unpin for GenericArgument","synthetic":true,"types":[]},{"text":"impl Unpin for PathArguments","synthetic":true,"types":[]},{"text":"impl Unpin for Underscore","synthetic":true,"types":[]},{"text":"impl Unpin for Abstract","synthetic":true,"types":[]},{"text":"impl Unpin for As","synthetic":true,"types":[]},{"text":"impl Unpin for Async","synthetic":true,"types":[]},{"text":"impl Unpin for Auto","synthetic":true,"types":[]},{"text":"impl Unpin for Await","synthetic":true,"types":[]},{"text":"impl Unpin for Become","synthetic":true,"types":[]},{"text":"impl Unpin for Box","synthetic":true,"types":[]},{"text":"impl Unpin for Break","synthetic":true,"types":[]},{"text":"impl Unpin for Const","synthetic":true,"types":[]},{"text":"impl Unpin for Continue","synthetic":true,"types":[]},{"text":"impl Unpin for Crate","synthetic":true,"types":[]},{"text":"impl Unpin for Default","synthetic":true,"types":[]},{"text":"impl Unpin for Do","synthetic":true,"types":[]},{"text":"impl Unpin for Dyn","synthetic":true,"types":[]},{"text":"impl Unpin for Else","synthetic":true,"types":[]},{"text":"impl Unpin for Enum","synthetic":true,"types":[]},{"text":"impl Unpin for Extern","synthetic":true,"types":[]},{"text":"impl Unpin for Final","synthetic":true,"types":[]},{"text":"impl Unpin for Fn","synthetic":true,"types":[]},{"text":"impl Unpin for For","synthetic":true,"types":[]},{"text":"impl Unpin for If","synthetic":true,"types":[]},{"text":"impl Unpin for Impl","synthetic":true,"types":[]},{"text":"impl Unpin for In","synthetic":true,"types":[]},{"text":"impl Unpin for Let","synthetic":true,"types":[]},{"text":"impl Unpin for Loop","synthetic":true,"types":[]},{"text":"impl Unpin for Macro","synthetic":true,"types":[]},{"text":"impl Unpin for Match","synthetic":true,"types":[]},{"text":"impl Unpin for Mod","synthetic":true,"types":[]},{"text":"impl Unpin for Move","synthetic":true,"types":[]},{"text":"impl Unpin for Mut","synthetic":true,"types":[]},{"text":"impl Unpin for Override","synthetic":true,"types":[]},{"text":"impl Unpin for Priv","synthetic":true,"types":[]},{"text":"impl Unpin for Pub","synthetic":true,"types":[]},{"text":"impl Unpin for Ref","synthetic":true,"types":[]},{"text":"impl Unpin for Return","synthetic":true,"types":[]},{"text":"impl Unpin for SelfType","synthetic":true,"types":[]},{"text":"impl Unpin for SelfValue","synthetic":true,"types":[]},{"text":"impl Unpin for Static","synthetic":true,"types":[]},{"text":"impl Unpin for Struct","synthetic":true,"types":[]},{"text":"impl Unpin for Super","synthetic":true,"types":[]},{"text":"impl Unpin for Trait","synthetic":true,"types":[]},{"text":"impl Unpin for Try","synthetic":true,"types":[]},{"text":"impl Unpin for Type","synthetic":true,"types":[]},{"text":"impl Unpin for Typeof","synthetic":true,"types":[]},{"text":"impl Unpin for Union","synthetic":true,"types":[]},{"text":"impl Unpin for Unsafe","synthetic":true,"types":[]},{"text":"impl Unpin for Unsized","synthetic":true,"types":[]},{"text":"impl Unpin for Use","synthetic":true,"types":[]},{"text":"impl Unpin for Virtual","synthetic":true,"types":[]},{"text":"impl Unpin for Where","synthetic":true,"types":[]},{"text":"impl Unpin for While","synthetic":true,"types":[]},{"text":"impl Unpin for Yield","synthetic":true,"types":[]},{"text":"impl Unpin for Add","synthetic":true,"types":[]},{"text":"impl Unpin for AddEq","synthetic":true,"types":[]},{"text":"impl Unpin for And","synthetic":true,"types":[]},{"text":"impl Unpin for AndAnd","synthetic":true,"types":[]},{"text":"impl Unpin for AndEq","synthetic":true,"types":[]},{"text":"impl Unpin for At","synthetic":true,"types":[]},{"text":"impl Unpin for Bang","synthetic":true,"types":[]},{"text":"impl Unpin for Caret","synthetic":true,"types":[]},{"text":"impl Unpin for CaretEq","synthetic":true,"types":[]},{"text":"impl Unpin for Colon","synthetic":true,"types":[]},{"text":"impl Unpin for Colon2","synthetic":true,"types":[]},{"text":"impl Unpin for Comma","synthetic":true,"types":[]},{"text":"impl Unpin for Div","synthetic":true,"types":[]},{"text":"impl Unpin for DivEq","synthetic":true,"types":[]},{"text":"impl Unpin for Dollar","synthetic":true,"types":[]},{"text":"impl Unpin for Dot","synthetic":true,"types":[]},{"text":"impl Unpin for Dot2","synthetic":true,"types":[]},{"text":"impl Unpin for Dot3","synthetic":true,"types":[]},{"text":"impl Unpin for DotDotEq","synthetic":true,"types":[]},{"text":"impl Unpin for Eq","synthetic":true,"types":[]},{"text":"impl Unpin for EqEq","synthetic":true,"types":[]},{"text":"impl Unpin for Ge","synthetic":true,"types":[]},{"text":"impl Unpin for Gt","synthetic":true,"types":[]},{"text":"impl Unpin for Le","synthetic":true,"types":[]},{"text":"impl Unpin for Lt","synthetic":true,"types":[]},{"text":"impl Unpin for MulEq","synthetic":true,"types":[]},{"text":"impl Unpin for Ne","synthetic":true,"types":[]},{"text":"impl Unpin for Or","synthetic":true,"types":[]},{"text":"impl Unpin for OrEq","synthetic":true,"types":[]},{"text":"impl Unpin for OrOr","synthetic":true,"types":[]},{"text":"impl Unpin for Pound","synthetic":true,"types":[]},{"text":"impl Unpin for Question","synthetic":true,"types":[]},{"text":"impl Unpin for RArrow","synthetic":true,"types":[]},{"text":"impl Unpin for LArrow","synthetic":true,"types":[]},{"text":"impl Unpin for Rem","synthetic":true,"types":[]},{"text":"impl Unpin for RemEq","synthetic":true,"types":[]},{"text":"impl Unpin for FatArrow","synthetic":true,"types":[]},{"text":"impl Unpin for Semi","synthetic":true,"types":[]},{"text":"impl Unpin for Shl","synthetic":true,"types":[]},{"text":"impl Unpin for ShlEq","synthetic":true,"types":[]},{"text":"impl Unpin for Shr","synthetic":true,"types":[]},{"text":"impl Unpin for ShrEq","synthetic":true,"types":[]},{"text":"impl Unpin for Star","synthetic":true,"types":[]},{"text":"impl Unpin for Sub","synthetic":true,"types":[]},{"text":"impl Unpin for SubEq","synthetic":true,"types":[]},{"text":"impl Unpin for Tilde","synthetic":true,"types":[]},{"text":"impl Unpin for Brace","synthetic":true,"types":[]},{"text":"impl Unpin for Bracket","synthetic":true,"types":[]},{"text":"impl Unpin for Paren","synthetic":true,"types":[]},{"text":"impl Unpin for Group","synthetic":true,"types":[]},{"text":"impl Unpin for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Unpin for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Unpin for Pairs&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Unpin for PairsMut&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Unpin for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Unpin for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; Unpin for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Nothing","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl Unpin for Duration","synthetic":true,"types":[]},{"text":"impl Unpin for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl Unpin for Timespec","synthetic":true,"types":[]},{"text":"impl Unpin for PreciseTime","synthetic":true,"types":[]},{"text":"impl Unpin for SteadyTime","synthetic":true,"types":[]},{"text":"impl Unpin for Tm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for TmFmt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for ParseError","synthetic":true,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A&gt; Unpin for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A&gt; Unpin for ArrayVecDrain&lt;'p, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for ArrayVecIterator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A&gt; Unpin for TinyVecDrain&lt;'p, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for TinyVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for TinyVecIterator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["toml"] = [{"text":"impl Unpin for Datetime","synthetic":true,"types":[]},{"text":"impl Unpin for DatetimeParseError","synthetic":true,"types":[]},{"text":"impl Unpin for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Deserializer&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["typenum"] = [{"text":"impl Unpin for Greater","synthetic":true,"types":[]},{"text":"impl Unpin for Less","synthetic":true,"types":[]},{"text":"impl Unpin for Equal","synthetic":true,"types":[]},{"text":"impl Unpin for B0","synthetic":true,"types":[]},{"text":"impl Unpin for B1","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Unpin for PInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Unpin for NInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Z0","synthetic":true,"types":[]},{"text":"impl Unpin for UTerm","synthetic":true,"types":[]},{"text":"impl&lt;U, B&gt; Unpin for UInt&lt;U, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ATerm","synthetic":true,"types":[]},{"text":"impl&lt;V, A&gt; Unpin for TArr&lt;V, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["unicase"] = [{"text":"impl&lt;S&gt; Unpin for UniCase&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl Unpin for ParagraphInfo","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Unpin for InitialInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Unpin for BidiInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for BidiClass","synthetic":true,"types":[]},{"text":"impl Unpin for Level","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; Unpin for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for IsNormalized","synthetic":true,"types":[]}];
implementors["universal_hash"] = [{"text":"impl&lt;N&gt; Unpin for Output&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;u8&gt;&gt;::ArrayType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]}];
implementors["untrusted"] = [{"text":"impl&lt;'a&gt; Unpin for Input&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Reader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Mark","synthetic":true,"types":[]},{"text":"impl Unpin for EndOfInput","synthetic":true,"types":[]}];
implementors["url"] = [{"text":"impl Unpin for OpaqueOrigin","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Unpin for HostAndPort&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for SocketAddrs","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for PathSegmentsMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Url","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ParseOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for UrlQuery&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Origin","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Unpin for Host&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ParseError","synthetic":true,"types":[]},{"text":"impl Unpin for SyntaxViolation","synthetic":true,"types":[]},{"text":"impl Unpin for Position","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Parse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ParseIntoOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ByteSerialize&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Serializer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["uuid"] = [{"text":"impl Unpin for Builder","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for Uuid","synthetic":true,"types":[]},{"text":"impl Unpin for Version","synthetic":true,"types":[]},{"text":"impl Unpin for Variant","synthetic":true,"types":[]},{"text":"impl Unpin for Hyphenated","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for HyphenatedRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Simple","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for SimpleRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Urn","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for UrnRef&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["walkdir"] = [{"text":"impl Unpin for DirEntry","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for WalkDir","synthetic":true,"types":[]},{"text":"impl Unpin for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Unpin for FilterEntry&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["webpki"] = [{"text":"impl&lt;'a&gt; Unpin for DNSNameRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for DNSName","synthetic":true,"types":[]},{"text":"impl Unpin for SignatureAlgorithm","synthetic":true,"types":[]},{"text":"impl Unpin for Time","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for EndEntityCert&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for TrustAnchor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for TLSServerTrustAnchors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for TLSClientTrustAnchors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]}];
implementors["yansi"] = [{"text":"impl Unpin for Style","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Paint&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Color","synthetic":true,"types":[]}];
implementors["zeroize"] = [{"text":"impl&lt;Z&gt; Unpin for Zeroizing&lt;Z&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Z: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()