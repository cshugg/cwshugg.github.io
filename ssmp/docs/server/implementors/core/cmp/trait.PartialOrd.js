(function() {var implementors = {};
implementors["aead"] = [{"text":"impl PartialOrd&lt;Error&gt; for Error","synthetic":false,"types":[]}];
implementors["argon2"] = [{"text":"impl PartialOrd&lt;Variant&gt; for Variant","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Version&gt; for Version","synthetic":false,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; PartialOrd&lt;ArrayString&lt;A&gt;&gt; for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Array&lt;Item = u8&gt; + Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A&gt; PartialOrd&lt;str&gt; for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Array&lt;Item = u8&gt; + Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A&gt; PartialOrd&lt;ArrayString&lt;A&gt;&gt; for str <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Array&lt;Item = u8&gt; + Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;PartialOrd&gt; PartialOrd&lt;CapacityError&lt;T&gt;&gt; for CapacityError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; PartialOrd&lt;ArrayVec&lt;A&gt;&gt; for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: PartialOrd,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["byteorder"] = [{"text":"impl PartialOrd&lt;BigEndian&gt; for BigEndian","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;LittleEndian&gt; for LittleEndian","synthetic":false,"types":[]}];
implementors["chrono"] = [{"text":"impl PartialOrd&lt;NaiveDate&gt; for NaiveDate","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;NaiveDateTime&gt; for NaiveDateTime","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;IsoWeek&gt; for IsoWeek","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;NaiveTime&gt; for NaiveTime","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; PartialOrd&lt;Date&lt;Tz&gt;&gt; for Date&lt;Tz&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone, Tz2:&nbsp;TimeZone&gt; PartialOrd&lt;DateTime&lt;Tz2&gt;&gt; for DateTime&lt;Tz&gt;","synthetic":false,"types":[]}];
implementors["devise_core"] = [{"text":"impl PartialOrd&lt;GenericSupport&gt; for GenericSupport","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;DataSupport&gt; for DataSupport","synthetic":false,"types":[]}];
implementors["filetime"] = [{"text":"impl PartialOrd&lt;FileTime&gt; for FileTime","synthetic":false,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T:&nbsp;PartialOrd, N&gt; PartialOrd&lt;GenericArray&lt;T, N&gt;&gt; for GenericArray&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["glob"] = [{"text":"impl PartialOrd&lt;Pattern&gt; for Pattern","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;MatchOptions&gt; for MatchOptions","synthetic":false,"types":[]}];
implementors["hyper"] = [{"text":"impl PartialOrd&lt;HttpDate&gt; for HttpDate","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Quality&gt; for Quality","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;PartialEq&gt; PartialOrd&lt;QualityItem&lt;T&gt;&gt; for QualityItem&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;StatusCode&gt; for StatusCode","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;StatusClass&gt; for StatusClass","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;HttpVersion&gt; for HttpVersion","synthetic":false,"types":[]}];
implementors["inotify"] = [{"text":"impl PartialOrd&lt;EventMask&gt; for EventMask","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;WatchMask&gt; for WatchMask","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl PartialOrd&lt;LogLevel&gt; for LogLevel","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;LogLevelFilter&gt; for LogLevel","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;LogLevelFilter&gt; for LogLevelFilter","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;LogLevel&gt; for LogLevelFilter","synthetic":false,"types":[]}];
implementors["mime"] = [{"text":"impl&lt;T:&nbsp;PartialOrd + AsRef&lt;[Param]&gt;&gt; PartialOrd&lt;Mime&lt;T&gt;&gt; for Mime&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;TopLevel&gt; for TopLevel","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;SubLevel&gt; for SubLevel","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Attr&gt; for Attr","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Value&gt; for Value","synthetic":false,"types":[]}];
implementors["mio"] = [{"text":"impl PartialOrd&lt;PollOpt&gt; for PollOpt","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Ready&gt; for Ready","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;UnixReady&gt; for UnixReady","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Token&gt; for Token","synthetic":false,"types":[]}];
implementors["notify"] = [{"text":"impl PartialOrd&lt;Op&gt; for Op","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;RecursiveMode&gt; for RecursiveMode","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl PartialOrd&lt;Ident&gt; for Ident","synthetic":false,"types":[]}];
implementors["rocket"] = [{"text":"impl&lt;'r, T:&nbsp;PartialOrd + Send + Sync + 'static&gt; PartialOrd&lt;State&lt;'r, T&gt;&gt; for State&lt;'r, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;PartialOrd, E:&nbsp;PartialOrd, F:&nbsp;PartialOrd&gt; PartialOrd&lt;Outcome&lt;S, E, F&gt;&gt; for Outcome&lt;S, E, F&gt;","synthetic":false,"types":[]}];
implementors["rocket_http"] = [{"text":"impl PartialOrd&lt;RawStr&gt; for RawStr","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;str&gt; for RawStr","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;UncasedStr&gt; for UncasedStr","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; PartialOrd&lt;Uncased&lt;'b&gt;&gt; for Uncased&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; PartialOrd&lt;SmallVec&lt;A&gt;&gt; for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: PartialOrd,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl PartialOrd&lt;Lifetime&gt; for Lifetime","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl PartialOrd&lt;Duration&gt; for Duration","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Timespec&gt; for Timespec","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;SteadyTime&gt; for SteadyTime","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Tm&gt; for Tm","synthetic":false,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; PartialOrd&lt;ArrayVec&lt;A&gt;&gt; for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: PartialOrd,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; PartialOrd&lt;TinyVec&lt;A&gt;&gt; for TinyVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: PartialOrd,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["typenum"] = [{"text":"impl PartialOrd&lt;B0&gt; for B0","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;B1&gt; for B1","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;PartialOrd + Unsigned + NonZero&gt; PartialOrd&lt;PInt&lt;U&gt;&gt; for PInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;PartialOrd + Unsigned + NonZero&gt; PartialOrd&lt;NInt&lt;U&gt;&gt; for NInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Z0&gt; for Z0","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;UTerm&gt; for UTerm","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;PartialOrd, B:&nbsp;PartialOrd&gt; PartialOrd&lt;UInt&lt;U, B&gt;&gt; for UInt&lt;U, B&gt;","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;ATerm&gt; for ATerm","synthetic":false,"types":[]},{"text":"impl&lt;V:&nbsp;PartialOrd, A:&nbsp;PartialOrd&gt; PartialOrd&lt;TArr&lt;V, A&gt;&gt; for TArr&lt;V, A&gt;","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Greater&gt; for Greater","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Less&gt; for Less","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Equal&gt; for Equal","synthetic":false,"types":[]}];
implementors["unicase"] = [{"text":"impl&lt;T:&nbsp;AsRef&lt;str&gt;&gt; PartialOrd&lt;UniCase&lt;T&gt;&gt; for UniCase&lt;T&gt;","synthetic":false,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl PartialOrd&lt;Level&gt; for Level","synthetic":false,"types":[]}];
implementors["url"] = [{"text":"impl&lt;S:&nbsp;PartialOrd&gt; PartialOrd&lt;Host&lt;S&gt;&gt; for Host&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Url&gt; for Url","synthetic":false,"types":[]}];
implementors["uuid"] = [{"text":"impl PartialOrd&lt;Hyphenated&gt; for Hyphenated","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; PartialOrd&lt;HyphenatedRef&lt;'a&gt;&gt; for HyphenatedRef&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Simple&gt; for Simple","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; PartialOrd&lt;SimpleRef&lt;'a&gt;&gt; for SimpleRef&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Urn&gt; for Urn","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; PartialOrd&lt;UrnRef&lt;'a&gt;&gt; for UrnRef&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Uuid&gt; for Uuid","synthetic":false,"types":[]}];
implementors["webpki"] = [{"text":"impl PartialOrd&lt;Time&gt; for Time","synthetic":false,"types":[]}];
implementors["yansi"] = [{"text":"impl&lt;T:&nbsp;PartialOrd&gt; PartialOrd&lt;Paint&lt;T&gt;&gt; for Paint&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Style&gt; for Style","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Color&gt; for Color","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()